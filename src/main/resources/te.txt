
    public void registerUser(User user) {
        activateUser(user);
        generateRecoveryCode(user);
        setDefaultCountsOfWrongAttempts(user);
        user.setNumberOfPoints(new BigDecimal(DEFAULT_COUNT_OF_FREE_POINTS));
    }

    public void activateUser(User user) {
        user.setActive(true);
    }

    public String getCurrentUsername() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        return auth.getName();
    }

    public void generateRecoveryCode(User user) {
        Random r = new Random();
        user.setActivationCode(String.valueOf(r.nextInt((999999 - 100000) + 1) + 100000));
    }

    public Optional<User> getUserByEmail(String email) {
        return Optional.of(userRepository.findUserByEmail(email));
    }

    public void setDefaultCountsOfWrongAttempts(User user) {
        user.setCountOfWrongAttempts(DEFAULT_COUNT_OF_WRONG_ATTEMPTS);
    }

    public void minusTry(User user) {
        if (!user.isBlocked()) {
            user.setCountOfWrongAttempts(user.getCountOfWrongAttempts() + 1);
            if (user.getCountOfWrongAttempts() == MAX_COUNT_OF_WRONG_ATTEMPTS) {
                blockUser(user);
            }
        }
    }

    public void blockUser(User user) {
        user.setBlocked(true);
    }